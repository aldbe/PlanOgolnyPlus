# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PlanOgolny
                                 A QGIS plugin
 This plugin create vector layer with predefined fields' names in the attribute table. 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-03-24
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Aldona Bełc
        email                : aldonabelc@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant, QDir
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QCheckBox, QFileDialog, QDialog
from qgis.core import QgsProject, Qgis, QgsLayerTreeLayer, QgsVectorLayer, QgsFeature, QgsField, QgsGeometry, QgsPointXY, QgsVectorFileWriter, QgsWkbTypes, QgsEditorWidgetSetup 

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .plan_ogolny_dialog import PlanOgolnyDialog
import os
import csv 


class PlanOgolny:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'PlanOgolny_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Plan Ogólny+')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        self.xlsx_path = None

    def select_xlsx_file(self):
        path, _ = QFileDialog.getSaveFileName(
            self.dlg, "Zapisz raport", "", "Excel (*.xlsx)"
        )
        if not path:
            return
        if not path.lower().endswith(".xlsx"):
            path += ".xlsx"
        self.xlsx_path = path
        self.dlg.eksport_xlsx_lineEdit.setText(path)


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('PlanOgolny', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/plan_ogolny/layer-plus.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Uruchom PlanOgólny+'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Plan Ogólny+'),
                action)
            self.iface.removeToolBarIcon(action)
    
    def select_output_file(self):
        path, _ = QFileDialog.getSaveFileName(
            self.dlg,
            "Zapisz plik do Shapefile",
            os.path.expanduser("~") + "/strefy_planistyczne.shp",
            "ESRI Shapefile (*.shp)"
        )
        if not path:
            return # uzytkownik anulował
        self.dlg.lineEditOutputDir.setText(path)
        # upewnij się, że ma rozszerzenie .shp
        if not path.lower().endswith(".shp"):
            path += ".shp"
        self.dlg.lineEditOutputDir.setText(path)

    
    def run(self):
        """Run method that performs all the real work."""
        # self.iface.messageBar().pushMessage("Debug", "run() wywołane", level=Qgis.Info, duration=3)
        # 1. Pierwsze uruchomienie: zainicjuj dialog
        if self.first_start:
            self.first_start = False
            self.dlg = PlanOgolnyDialog()
            # podpięcie przycisku Export XLSX w Tab 2
            self.dlg.eksport_xlsx_pushButton.clicked.connect(self.select_xlsx_file)
            self.dlg.pushButtonSelectDir.clicked.connect(self.select_output_file)
        self.dlg.lineEditOutputDir.clear()


# -------------------- KROK 1 --------------------------------------------

        # 2. Wypełnij combobox tylko wektorami, także w grupach
        vector_layers = [
            node for node in QgsProject.instance().layerTreeRoot().findLayers()
            if node.layer() and isinstance(node.layer(), QgsVectorLayer)
        ]
        self.dlg.combo_aktywna_warstwa.clear()
        self.dlg.combo_aktywna_warstwa_2.clear()
        for node in vector_layers:
            self.dlg.combo_aktywna_warstwa.addItem(node.layer().name())
            self.dlg.combo_aktywna_warstwa_2.addItem(node.layer().name())

        # See if OK was pressed
        # 3. Pokaż dialog i wyjdź, jeśli Anuluj
        self.dlg.show()
        if not self.dlg.exec_():
            return
        
        # 3.5) Sprawdź, która karta jest aktywna
        if self.dlg.tabWidget.currentIndex() == 0:
            # === TAB 1: Tworzenie warstwy pamięciowej ze stylem ===
            self._process_tab1()
        else:
            # === TAB 2: Liczenie powierzchni i eksport do CSV ===
            self._process_tab2()
    
    def _process_tab1(self):
        vector_layers = [
            node for node in QgsProject.instance().layerTreeRoot().findLayers()
            if node.layer() and isinstance(node.layer(), QgsVectorLayer)
        ]
        # skopiowałam ten frament bo brakowało definicji vector_layers w tej definicji

        # 4. Pobierz warstwę wejściową i cechy
        sel = self.dlg.combo_aktywna_warstwa.currentIndex()
        input_layer = vector_layers[sel].layer()
        if self.dlg.checkbox_tylko_zaznaczone.isChecked():
            features = input_layer.selectedFeatures()
        else:
            features = list(input_layer.getFeatures())

        # 5. Stwórz pamięciową warstwę w projekcie CRS
        crs = QgsProject.instance().crs().authid()
        vl = QgsVectorLayer(f"Polygon?crs={crs}", "strefy_planistyczne", "memory")
        pr = vl.dataProvider()

        # 6. Skopiuj pola i dodaj nowe pole STREFA
        fields = input_layer.fields()
        fields.append(QgsField("STREFA", QVariant.String))
        pr.addAttributes(fields)
        vl.updateFields()

        # 7. Skopiuj geometrię i atrybuty + wartość domyślną
        feats = []
        default = "uzupełnij"
        for f in features:
            new_f = QgsFeature(vl.fields())
            new_f.setGeometry(f.geometry())
            attrs = f.attributes()
            attrs.append(default)
            new_f.setAttributes(attrs)
            feats.append(new_f)
        pr.addFeatures(feats)
        vl.updateExtents()

        # 8. Nałóż QML z formularzem 
        style = os.path.join(self.plugin_dir, "style", "strefy-planistyczne.qml")
        if os.path.exists(style):
            vl.loadNamedStyle(style)
            vl.triggerRepaint()

        
        # 9. Sprawdź, czy użytkownik wpisał ścieżkę: 
        shp_path = self.dlg.lineEditOutputDir.text().strip()
        
        # ------------------EKSPORT NA DYSK--------------------------
        # 10. EKsport do pliku w katalogu wskazanym przez uzytkowanika 
        if shp_path:
            # Utwórz katalog jeśli trzeba
            folder = os.path.dirname(shp_path)
            if folder and not os.path.isdir(folder):
                try:
                    os.makedirs(folder)
                except Exception as e:
                    self.iface.messageBar().pushMessage(
                        "Błąd",
                        f"Nie udało się utworzyć katalogu: \n{e}",
                        level=Qgis.Critical
                    )
                    return

        
        # ------------------EKSPORT NA DYSK LUB PAMIĘCIOWY--------------------------
        if shp_path:
            # 11. Zapisz pamięciową warstwę do wskazanego pliku
            if not shp_path.lower().endswith(".shp"):
                shp_path += ".shp"

            error_code, error_msg = QgsVectorFileWriter.writeAsVectorFormat(
                vl,
                shp_path,
                "utf-8", 
                vl.crs(), 
                "ESRI Shapefile"
            )
            if error_code != QgsVectorFileWriter.NoError:
                self.iface.messageBar().pushMessage(
                    "Błąd", f"Export do Shapefile nie powiódł się (kod {error_msg})", level=Qgis.Critical
                )
                return
            
            # 12. Wczytaj z dysku i dodaj do projektu + styl
            layer_to_add = QgsVectorLayer(shp_path, "strefy_planistyczne", "ogr")
            if not layer_to_add.isValid():
                self.iface.messageBar().pushMessage(
                    "Błąd", "Nie udało się wczytać wyeksportowanego shapefile’a", level=Qgis.Critical
                )
                return  
            
            if os.path.exists(style):
                layer_to_add.loadNamedStyle(style)
                layer_to_add.triggerRepaint()

            QgsProject.instance().addMapLayer(layer_to_add)
            self.iface.messageBar().pushMessage(
                "Sukces",
                f"Shapefile zapisano jako:\n{shp_path}",
                level=Qgis.Success,
                duration=8
            )

        else:
            # 13. Tryb pamięciowy (anulowane zapisywanie)
            QgsProject.instance().addMapLayer(vl)
            self.iface.messageBar().pushMessage(
                "Sukces",
                "Dodano warstwę tymczasową „strefy_planistyczne” ",
                level=Qgis.Success,
                duration=8
            )
# -------------------- KROK 2 --------------------------------------------
    
    def _process_tab2(self):
        # 1. pobranie opcjonalnych pól z dialogu
        znak = self.dlg.znak_sprawy_lineEdit.text()
        unp  = self.dlg.unp_lineEdit.text()

        # 2. wybór oryginalnej warstwy po nazwie
        name = self.dlg.combo_aktywna_warstwa_2.currentText()
        layers = QgsProject.instance().mapLayersByName(name)
        if not layers:
            self.iface.messageBar().pushMessage(
                "Błąd", f"Nie znalazłem warstwy {name}", level=Qgis.Critical
            )
            return
        src = layers[0]
        
        # 3. słownik do mapowania kodów STREFA → pełne nazwy
        map_stref = {
            "SW": "wielofunkcyjna z zabudową mieszkaniową wielorodzinną",
            "SJ": "wielofunkcyjna z zabudową mieszkaniową jednorodzinną",
            "SZ": "wielofunkcyjna z zabudową zagrodową",
            "SU": "usługowa",
            "SH": "handlu wielkopowierzchniowego",
            "SP": "gospodarcza",
            "SR": "produkcji rolniczej",
            "SI": "infrastrukturalna",
            "SN": "zieleni i rekreacji",
            "SC": "cmentarzy",
            "SG": "górnictwa",
            "SO": "otwarta",
            "SK": "komunikacyjna",
            "SJ/SU": "wielofunkcyjna z zabudową mieszkaniową jednorodzinną LUB usługowa",
            "SW/SU": "wielofunkcyjna z zabudową mieszkaniową wielorodzinną LUB usługowa",
        }

         # 4. zbierz listę nazw kolumn 
        field_names = [f.name() for f in src.fields() if f.name() != "STREFA"]
        headers = field_names + ["STREFA", "pow_ha"]

        # 5. wylicz ścieżkę .csv 
        csv_path = os.path.splitext(self.xlsx_path)[0] + ".csv"

        # 6. otwórz plik i zacznij pisać
        with open(csv_path, "w", newline="", encoding="utf-8-sig") as fp:
            writer = csv.writer(fp, delimiter=";")

            # 6.1 metadane nad tabelą
            if znak:
                writer.writerow(["Znak sprawy:", znak])
            if unp:
                writer.writerow(["UNP:", unp])
            if znak or unp:
                writer.writerow([])  # pusty wiersz

            # 6.2 nagłówki kolumn
            writer.writerow(headers)

            # 6.3 wiersze
            for feat in src.getFeatures():
                row = []
                # oryginalne atrybuty
                for name in field_names:
                    row.append(feat[name])
                # mapowanie STREFA
                code = feat["STREFA"]
                full = map_stref.get(code, code)
                row.append(full)
                # powierzchnia
                ha = feat.geometry().area() / 10000.0
                row.append(round(ha, 4))
                writer.writerow(row)

        


        self.iface.messageBar().pushMessage(
            "Sukces", f"Raport zapisano do CSV:\n{csv_path}", level=Qgis.Success
        )
        self.dlg.accept()
        return

        

       
       